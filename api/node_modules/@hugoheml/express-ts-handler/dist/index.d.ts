import { Response, NextFunction, RequestHandler, Request } from 'express';

type BaseType = {
    _output: unknown;
};
type ObjectType<T extends BaseType> = Record<string, T>;
type Parse<T extends BaseType, Result> = (type: T, value: unknown) => Result;
type Output<T extends BaseType | ObjectType<BaseType>> = T extends BaseType ? T['_output'] : {
    [K in keyof T]: T[K] extends BaseType ? T[K]['_output'] : never;
};
type Options<T extends BaseType> = {
    parse: Parse<T, unknown>;
    object(props: Record<string, T>): unknown;
    checkResult?: boolean;
};
type Middleware = <Req extends Request>(req: Req, res: Response, next: NextFunction) => Req | Request | void | Promise<Req | Request | void>;
type ReduceMiddleware<U extends any[], Req> = U extends [infer L, ...infer R] ? L extends (...args: any[]) => Request | Promise<Request> ? ReduceMiddleware<R, Awaited<ReturnType<L>> & Req> : ReduceMiddleware<R, Req> : Req;
type MiddlewareResult<U extends Middleware[], M extends Middleware> = Middleware[] extends U ? Middleware extends M ? Request : Awaited<ReturnType<M>> : ReduceMiddleware<U, Request>;
type CheckResult<Expected, Actual> = [Expected] extends [Actual] ? [Actual] extends [Expected] ? Actual : never : never;
type ToArray<T> = T extends unknown[] ? T : [T];
type Handler<T extends BaseType> = <U extends Middleware[], M extends Middleware, Q extends T | ObjectType<T>, P extends T | ObjectType<T>, B extends T | ObjectType<T>, R extends T | ObjectType<T>, Result extends Output<R> | Promise<Output<R>>>(obj: {
    use?: M | [...U];
    query?: Q;
    params?: P;
    body?: B;
    result?: R;
    handler: (req: {
        [K in keyof MiddlewareResult<U, M>]: K extends 'query' ? Output<Q> : K extends 'params' ? Output<P> : K extends 'body' ? Output<B> : K extends 'res' ? Response<Output<R>> : MiddlewareResult<U, M>[K];
    }, res: Response<Output<R>>, next: NextFunction) => CheckResult<Output<R>, Result> | CheckResult<Promise<Output<R>>, Result> | void | Promise<void>;
}) => RequestHandler;
declare const makeHandler: <T extends BaseType>({ parse, checkResult, object, }: Options<T>) => Handler<T>;

export { ToArray, makeHandler };
