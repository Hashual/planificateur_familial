{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { NextFunction, Request, RequestHandler, Response, Send } from 'express';\n\ntype BaseType = { _output: unknown };\n\ntype ObjectType<T extends BaseType> = Record<string, T>;\n\ntype Parse<T extends BaseType, Result> = (type: T, value: unknown) => Result;\n\ntype Output<T extends BaseType | ObjectType<BaseType>> = T extends BaseType\n  ? T['_output']\n  : {\n      [K in keyof T]: T[K] extends BaseType ? T[K]['_output'] : never;\n    };\n\ntype Options<T extends BaseType> = {\n  parse: Parse<T, unknown>;\n  object(props: Record<string, T>): unknown;\n  checkResult?: boolean;\n};\n\ntype Middleware = <Req extends Request>(\n  req: Req,\n  res: Response,\n  next: NextFunction,\n) => Req | Request | void | Promise<Req | Request | void>;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ReduceMiddleware<U extends any[], Req> = U extends [infer L, ...infer R]\n  ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    L extends (...args: any[]) => Request | Promise<Request>\n    ? ReduceMiddleware<R, Awaited<ReturnType<L>> & Req>\n    : ReduceMiddleware<R, Req>\n  : Req;\n\ntype MiddlewareResult<\n  U extends Middleware[],\n  M extends Middleware,\n> = Middleware[] extends U\n  ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Middleware extends M\n    ? Request\n    : Awaited<ReturnType<M>>\n  : ReduceMiddleware<U, Request>;\n\ntype CheckResult<Expected, Actual> = [Expected] extends [Actual]\n  ? [Actual] extends [Expected]\n    ? Actual\n    : never\n  : never;\n\nexport type ToArray<T> = T extends unknown[] ? T : [T];\n\ntype Handler<T extends BaseType> = <\n  U extends Middleware[],\n  M extends Middleware,\n  Q extends T | ObjectType<T>,\n  P extends T | ObjectType<T>,\n  B extends T | ObjectType<T>,\n  R extends T | ObjectType<T>,\n  Result extends Output<R> | Promise<Output<R>>,\n>(obj: {\n  use?: M | [...U];\n  query?: Q;\n  params?: P;\n  body?: B;\n  result?: R;\n  handler: (\n    req: {\n      [K in keyof MiddlewareResult<U, M>]: K extends 'query'\n        ? Output<Q>\n        : K extends 'params'\n        ? Output<P>\n        : K extends 'body'\n        ? Output<B>\n        : K extends 'res'\n        ? Response<Output<R>>\n        : MiddlewareResult<U, M>[K];\n    },\n    res: Response<Output<R>>,\n    next: NextFunction,\n  ) =>\n    | CheckResult<Output<R>, Result>\n    | CheckResult<Promise<Output<R>>, Result>\n    | void\n    | Promise<void>;\n}) => RequestHandler;\n\nconst objectToType = (object: Options<BaseType>['object'], obj: unknown) => {\n  if (obj?.constructor === Object) {\n    obj = object(obj as Record<string, BaseType>);\n  }\n  return obj;\n};\n\nexport const makeHandler = <T extends BaseType>({\n  parse,\n  checkResult = process.env.NODE_ENV !== 'production',\n  object,\n}: Options<T>): Handler<T> => {\n  return (({ use, query, params, body, result, handler }) => {\n    query = objectToType(object, query) as typeof query;\n    params = objectToType(object, params) as typeof params;\n    body = objectToType(object, body) as typeof body;\n    result = objectToType(object, result) as typeof result;\n    if (use && !Array.isArray(use)) (use as unknown) = [use];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (async (req: any, res: any, next: (err?: unknown) => void) => {\n      let err;\n      let originalSend: Send | undefined;\n\n      const localNext = (error?: unknown) => {\n        err = error;\n      };\n\n      try {\n        if (use) {\n          for (const fn of use as Middleware[]) {\n            await fn(req, res, localNext);\n            if (err) {\n              next(err);\n              return;\n            }\n          }\n        }\n\n        if (query) req.query = parse(query as T, req.query);\n        if (params) req.params = parse(params as T, req.params);\n        if (body) req.body = parse(body as T, req.body);\n\n        if (result && checkResult) {\n          const send = res.send;\n          originalSend = send;\n          res.send = (value: unknown) => {\n            originalSend = undefined;\n            res.send = send;\n            return send.call(res, parse(result as T, value));\n          };\n        }\n\n        const output = await (handler as (...args: unknown[]) => unknown)(\n          req,\n          res,\n          localNext,\n        );\n        if (!res.headersSent && !err && output !== void 0) {\n          res.send(output as Output<Exclude<typeof result, undefined>>);\n        }\n      } catch (e) {\n        err = e;\n      }\n\n      if (originalSend) {\n        res.send = originalSend;\n      }\n\n      next(err);\n    }) as typeof handler;\n  }) as Handler<T>;\n};\n"],"names":[],"mappings":"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"}