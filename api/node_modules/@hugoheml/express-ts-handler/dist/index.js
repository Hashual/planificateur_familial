'use strict';

const objectToType = (object, obj) => {
  if ((obj == null ? void 0 : obj.constructor) === Object) {
    obj = object(obj);
  }
  return obj;
};
const makeHandler = ({
  parse,
  checkResult = process.env.NODE_ENV !== "production",
  object
}) => {
  return ({ use, query, params, body, result, handler }) => {
    query = objectToType(object, query);
    params = objectToType(object, params);
    body = objectToType(object, body);
    result = objectToType(object, result);
    if (use && !Array.isArray(use))
      use = [use];
    return async (req, res, next) => {
      let err;
      let originalSend;
      const localNext = (error) => {
        err = error;
      };
      try {
        if (use) {
          for (const fn of use) {
            await fn(req, res, localNext);
            if (err) {
              next(err);
              return;
            }
          }
        }
        if (query)
          req.query = parse(query, req.query);
        if (params)
          req.params = parse(params, req.params);
        if (body)
          req.body = parse(body, req.body);
        if (result && checkResult) {
          const send = res.send;
          originalSend = send;
          res.send = (value) => {
            originalSend = void 0;
            res.send = send;
            return send.call(res, parse(result, value));
          };
        }
        const output = await handler(
          req,
          res,
          localNext
        );
        if (!res.headersSent && !err && output !== void 0) {
          res.send(output);
        }
      } catch (e) {
        err = e;
      }
      if (originalSend) {
        res.send = originalSend;
      }
      next(err);
    };
  };
};

exports.makeHandler = makeHandler;
//# sourceMappingURL=index.js.map
